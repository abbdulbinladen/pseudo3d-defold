go.property("WIDTH_BUFFER",  960)
go.property("HEIGHT_BUFFER", 480)
go.property("FOV_ANGLE", 	 30)
go.property("CAMERA_SPEED",  2)

local p3d = require("m.p3d") -- pseudo 3d module
local u = require("m.utils") -- utils

-- pseudo 3d init

function p3d_init(width, height, fov, segments_count)
	p3d.w = width
	p3d.h = height
	p3d.s = u.calculate_scale(width, fov)
	p3d.f = fov
	p3d.sc = segments_count

	p3d.road={
		{seg_count=10, turn_to=0},
		{seg_count=6, turn_to=-2},
		{seg_count=8, turn_to=0},
		{seg_count=4, turn_to=3.5},
		{seg_count=10, turn_to=2.2},
		{seg_count=4, turn_to=0},
		{seg_count=5, turn_to=-5},
	}
end

-- drawpixels init

function set_buffer_info(self, config)
	self.buffer_info = config
	p3d.buffer_info = config
end

function drawpixels_init(self, width, height)
	self.resource_path = go.get("#sprite", "texture0")
	set_buffer_info(self, {
		buffer = buffer.create(width * height,
		{{
			name = hash("p3d"),
			type = buffer.VALUE_TYPE_UINT8,
			count = 4 -- same as channels
		}}),
		width = width,
		height = height,
		channels = 4,
		premultiply_alpha = false
	})
	self.header = {width = width, height = height, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_RGBA, num_mip_maps = 1}
end

-- lifecycle

function set_texture(self)
	resource.set_texture(self.resource_path, self.header, self.buffer_info.buffer)
end

function init(self)
	-- profiler.enable_ui(true)
	p3d_init(self.WIDTH_BUFFER, self.HEIGHT_BUFFER, self.FOV_ANGLE, 12)
	drawpixels_init(self, self.WIDTH_BUFFER, self.HEIGHT_BUFFER)
	drawpixels.fill(self.buffer_info, 128, 64, 64)
	p3d.draw_track()
	set_texture(self)
end

function update(self, dt)
	print(tostring(p3d.pos.z):match("%.(%d)"))
	p3d.pos.z = p3d.pos.z + self.CAMERA_SPEED * dt
	if p3d.pos.z > 1 then p3d.reset_camera_pos() end
	drawpixels.fill(self.buffer_info, 128, 64, 64)
	p3d.draw_track()
	set_texture(self)
end